#include <stdio.h>
#include <stdlib.h>
 
struct Node
{
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};
 
int getHeight(struct Node *n){
    if(n==NULL)
        return 0;
    return n->height;
}
 
struct Node *createNode(int key){
    struct Node* node = (struct Node *) malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}
 
int max (int a, int b){
    return (a>b)?a:b;
}
 
int getBalanceFactor(struct Node * n){
    if(n==NULL){
        return 0;
    }
    return getHeight(n->left) - getHeight(n->right);
}
 
struct Node* rightRotate(struct Node* y){
    struct Node* x = y->left;
    struct Node* T2 = x->right;
 
    x->right = y;
    y->left = T2;
 
    x->height = max(getHeight(x->right), getHeight(x->left)) + 1;
    y->height = max(getHeight(y->right), getHeight(y->left)) + 1;
 
    return x;
}
 
struct Node* leftRotate(struct Node* x){
    struct Node* y = x->right;
    struct Node* T2 = y->left;
 
    y->left = x;
    x->right = T2;
 
    x->height = max(getHeight(x->right), getHeight(x->left)) + 1;
    y->height = max(getHeight(y->right), getHeight(y->left)) + 1;
 
    return y;
}
 
struct Node *insert(struct Node* node, int key){
    if (node == NULL)
        return  createNode(key);
 
    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
 
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));
    int bf = getBalanceFactor(node);
 
    // Left Left Case
        if(bf>1 && key < node->left->key){
            return rightRotate(node);
        }
    // Right Right Case
        if(bf<-1 && key > node->right->key){
            return leftRotate(node);
        }
    // Left Right Case
    if(bf>1 && key > node->left->key){
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }
    // Right Left Case
    if(bf<-1 && key < node->right->key){
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }
    return node;
}
 
void preOrder(struct Node *root)
{
    if(root != NULL)
    {
        printf("%d ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}

 struct Node * minValueNode(struct Node* node) { 
    struct Node* current = node; 
    
    /* loop down to find the leftmost leaf */

    while (current->left != NULL) 
        current = current->left; 
    return current; 
} 

struct Node* deleteNode(struct Node* root, int key) { 
    // STEP 1: PERFORM STANDARD BST DELETE 
    if (root == NULL) 
        return root; 
        
    // If the key to be deleted is smaller than the root's key, then it lies in left subtree 
    if ( key < root->key ) 
        root->left = deleteNode(root->left, key); 
    else if( key > root->key ) 
        root->right = deleteNode(root->right, key); 
    else { 
        // node with only one child or no child
        if( (root->left == NULL) || (root->right == NULL) ){ 
            struct Node *temp = root->left ? root->left : 
                  root->right; 

       // No child case 
      if (temp == NULL) { 
                temp = root; 
                root = NULL; 
     } else // One child case 
             *root = *temp;
  // Copy the contents of the non-empty child 
            free(temp); 
     } 
        else { 

            // node with two children: Get the inorder 
            // successor (smallest in the right subtree) 
            struct Node* temp = minValueNode(root->right); 

            // Copy the inorder successor's data to this node 
            root->key = temp->key; 

            // Delete the inorder successor 
            root->right = deleteNode(root->right, temp->key); 
        } 
    } 

    // If the tree had only one node then return 
    if (root == NULL) 
      return root; 

    // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE 
    root->height = 1 + max(getHeight(root->left), getHeight(root->right)); 


    // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to 
    // check whether this node became unbalanced) 
    int balance = getBalanceFactor(root); 

    // If this node becomes unbalanced, then there are 4 cases 

    // Left Left Case 
    if (balance > 1 && getBalanceFactor(root->left) >= 0) 
        return rightRotate(root); 
    // Left Right Case 
    if (balance > 1 && getBalanceFactor(root->left) < 0) { 
        root->left =  leftRotate(root->left); 
        return rightRotate(root); 
    } 
    // Right Right Case 
    if (balance < -1 && getBalanceFactor(root->right) <= 0) 
        return leftRotate(root); 
    // Right Left Case 
    if (balance < -1 && getBalanceFactor(root->right) > 0) { 
        root->right = rightRotate(root->right); 
        return leftRotate(root); 
    } 
    return root; 
} 

int main(){
    struct Node * root = NULL;
    
    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);
    root = insert(root, 3);
    preOrder(root);
    root = deleteNode(root, 4);  
   preOrder(root);
    return 0;
}
