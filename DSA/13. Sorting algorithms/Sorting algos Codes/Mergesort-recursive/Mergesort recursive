#include<stdio.h>

void merge(int A[], int left, int mid, int right);

void merge_sort(int A[], int left, int right)
{
    if (left < right) {
        
        int mid = left + (right - left) / 2;
        
        merge_sort(A, left, mid);
        merge_sort(A, mid + 1, right);
        merge(A, left, mid, right);
    }
}

void merge(int A[], int left, int mid, int right)
{
    int i, j, k;
    int s1 = mid - left + 1;
    int s2 = right - mid;
 
    int left_arr[s1], right_arr[s2];
 
    /* copying data from A to temp arrs*/
    for (i = 0; i < s1; i++)
        left_arr[i] = A[left + i];
    
    for (j = 0; j < s2; j++)
        right_arr[j] = A[mid + 1 + j];
     
    i = 0, j = 0;  
    k = left; 
    while (i < s1 && j < s2) {
        if (left_arr[i] <= right_arr[j]) {
            A[k] = left_arr[i];
            i++;
        }
        else {
            A[k] = right_arr[j];
            j++;
        }
        k++;
    }
 
    /* Copying the items of left_arr[] that have been left */
    while (i < s1) {
        A[k] = left_arr[i];
        i++;
        k++;
    }
 
    /* Copying the items of right_arr[] that have been left */
    while (j < s2) {
        A[k] = right_arr[j];
        j++;
        k++;
    }
}

void printArray(int *A, int n)

{

    for (int i = 0; i < n; i++)

    {

        printf("%d ", A[i]);

    }

    printf("\n");

}

int main(){
    int A[] = {90, 66, 67, 32, 1011};
    int n=sizeof(A)/sizeof(A[0]);
    printArray(A,n);
    merge_sort(A, 0, 4);
    printArray(A,n);
}
