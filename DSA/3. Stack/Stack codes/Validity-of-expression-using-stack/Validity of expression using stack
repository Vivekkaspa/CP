#include <stdio.h>

int MAXSIZE = 20;       
int stack[20];     
int top = -1;            

int isempty() {

   if(top == -1)
      return 1;
   else
      return 0;
}
   
int isfull() {

   if(top == MAXSIZE)
      return 1;
   else
      return 0;
}

int peek() {
   return stack[top];
}

int pop() {
   int data;
	
   if(!isempty()) {
      data = stack[top];
      top = top - 1;   
      return data;
   } else {
      printf("Could not retrieve data, Stack is empty.\n");
   }
}

int push(int data) {

   if(!isfull()) {
      top = top + 1;   
      stack[top] = data;
   } else {
      printf("Could not insert data, Stack is full.\n");
   }
}

int code(char c) {
    if(c=='[') {return 1;}
    if(c=='(') {return 2;}
    if(c=='{') {return 3;}
    if(c=='<') {return 4;} 
    if(c==']') {return 5;}
    if(c==')') {return 6;}
    if(c=='}') {return 7;}
    if(c=='>') {return 8;}

return 10;

}

//bool isSame(char a)

int main() {
    bool valid =true;
    char s[] = "[(<{}>)]";
    int n =6;
     for (int i=0;i<n;i++) {
         if (code(s[i])<5) {
             push( code(s[i]));
         } else {
             if((code(s[i])-4)==pop()) {
                 top = top + 1;
                 pop();
                 
             } else {
                 top = top+1;
                 printf("OOPS... Invalid Expression!!\n");
                 valid = false;
                 break;
             }
             
         }
     }
         
if (valid) {printf("CONGRATULATIONS... VALID EXPRESSION !!!\n");}
    
   // push items on to the stack 
 /*  push(3);
   push(5);
   push(9);
   push(1);
   push(12);
   push(15);

   printf("Element at top of the stack: %d\n" ,peek());
   printf("Elements: \n");

   // print stack data 
   while(!isempty()) {
      int data = pop();
      printf("%d\n",data);
   }

   printf("Stack full: %s\n" , isfull()?"true":"false");
   printf("Stack empty: %s\n" , isempty()?"true":"false");
   */
   
   
   return 0;
}