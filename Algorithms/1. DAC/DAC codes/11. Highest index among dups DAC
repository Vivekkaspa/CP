#include <stdio.h>
#include <stdlib.h>

void find_highest_indices(int arr[], int left, int right, int counts[], int highest_indices[]) {
    if (left < right) {
        int mid = (left + right) / 2;
        find_highest_indices(arr, left, mid, counts, highest_indices);
        find_highest_indices(arr, mid + 1, right, counts, highest_indices);

        // Merge step
        int i = left;
        int j = mid + 1;
        int k = 0;
        int n = right - left + 1;
        int temp[n];
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k] = arr[i];
                k++;
                i++;
            } else {
                temp[k] = arr[j];
                k++;
                j++;
            }
        }
        while (i <= mid) {
            temp[k] = arr[i];
            k++;
            i++;
        }
        while (j <= right) {
            temp[k] = arr[j];
            k++;
            j++;
        }
        for (i = left; i <= right; i++) {
            arr[i] = temp[i - left];
        }

        // Count duplicates and find highest indices
        int prev = arr[left];
        int count = 1;
        for (i = left + 1; i <= right; i++) {
            if (arr[i] == prev) {
                count++;
            } else {
                if (count > 1) {
                    counts[prev] = count;
                    highest_indices[prev] = i - 1;
                }
                prev = arr[i];
                count = 1;
            }
        }
        if (count > 1) {
            counts[prev] = count;
            highest_indices[prev] = right;
        }
    }
}

int main() {
    int arr[] = {4, 2, 5, 2, 1, 4, 5, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int counts[n];
    int highest_indices[n];
    for (int i = 0; i < n; i++) {
        counts[i] = 0;
        highest_indices[i] = -1;
    }
    find_highest_indices(arr, 0, n - 1, counts, highest_indices);
    for (int i = 0; i < n; i++) {
        if (counts[i] > 1) {
            printf("The highest index of %d is %d\n", i, highest_indices[i]);
        }
    }
    return 0;
}
