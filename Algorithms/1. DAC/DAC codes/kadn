//#include <limits.h>
#include <stdio.h>
 
int max(int a, int b) {
   if (a > b) 
      return a;
    else 
      return b;
}


int max(int a, int b, int c) { 
         return max(max(a, b), c); 
}
 
int maxCrossingSum(int A[], int left, int mid, int right)
{

    // Include elements on left of mid.

    int sum = 0;

    int l_sum= 0;

    for (int i = mid; i >= left; i--) {

        sum = sum + A[i];

        if (sum > l_sum)

            l_sum = sum;

    }
 

    // Include elements on right of mid

    sum = 0;

    int r_sum = 0;
    
    for (int i = mid; i <= right; i++) {

        sum = sum + A[i];

        if (sum > r_sum)

            r_sum = sum;

    }
 

    // Return sum of elements on left and right of mid
    
    return 
    max(l_sum + r_sum - A[mid], l_sum, r_sum);
}
 
// Returns sum of maximum sum subarray in aa[l..h]

int maxSubArraySum(int A[], int left, int right)
{

      //Invalid Range: low is greater than high

      if (left > right)

          return 0;

    // Base Case: Only one element

    if (left == right)

        return A[left];
 

    // Find middle point

    int mid = (left + right) / 2;
 

    /* Return maximum of following three possible cases

            a) Maximum subarray sum in left half

            b) Maximum subarray sum in right half

            c) Maximum subarray sum such that the subarray

       crosses the midpoint */

    return max(
    maxSubArraySum(A, left, mid - 1),

    maxSubArraySum(A, mid + 1, right),

     maxCrossingSum(A, left, mid, right));
}
 

int main()
{

    int A[ ] = { 2, 3, 4, 5, 7 };

    int n = sizeof(A) / sizeof(A[0]);

    int max_sum = 
    maxSubArraySum(A, 0, n - 1);

    printf("Maximum contiguous sum in particular subarray is %d\n", max_sum);
    
    return 0;
}