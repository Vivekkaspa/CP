#include <stdio.h>
#include <stdlib.h>

// Function to find the median of an array
int median(int arr[], int n)
{
    int mid = n / 2;

    if (n % 2 == 0)
        return (arr[mid - 1] + arr[mid]) / 2;
    else
        return arr[mid];
}



// Function to swap two elements
void swap(int* a, int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array around a pivot element
int partition(int arr[], int l, int r, int x)
{
    int i;

    for (i = l; i < r; i++)
        if (arr[i] == x)
            break;

    swap(&arr[i], &arr[r]);

    i = l;

    for (int j = l; j < r; j++)
    {
        if (arr[j] <= x)
        {
            swap(&arr[i], &arr[j]);
            i++;
        }
    }

    swap(&arr[i], &arr[r]);
    return i;
}


// Function to find the k-th smallest element in the array using median of medians algorithm
int kthSmallest(int arr[], int l, int r, int k)
{
    if (k > 0 && k <= r - l + 1)
    {
        int n = r - l + 1;
        int i, medianArr[(n + 4) / 5];

        for (i = 0; i < n / 5; i++)
            medianArr[i] = median(arr + l + i * 5, 5);

        if (i * 5 < n)
        {
            medianArr[i] = median(arr + l + i * 5, n % 5);
            i++;
        }

        int medOfMed = (i == 1) ? medianArr[i - 1] : kthSmallest(medianArr, 0, i - 1, i / 2);

        int pos = partition(arr, l, r, medOfMed);

        if (pos - l == k - 1)
            return arr[pos];
        if (pos - l > k - 1)
            return kthSmallest(arr, l, pos - 1, k);
        return kthSmallest(arr, pos + 1, r, k - pos + l - 1);
    }

    return -1;
}




// Driver program to test the functions
int main()
{
    int arr[] = { 12, 3, 5, 7, 4, 19, 26 };
    int n = sizeof(arr) / sizeof(arr[0]), k = 3;

    printf("K-th smallest element is %d", kthSmallest(arr, 0, n - 1, k));

    return 0;
}
