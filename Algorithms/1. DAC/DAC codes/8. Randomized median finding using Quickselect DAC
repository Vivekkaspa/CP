#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to partition the array using pivot element
int partition(int arr[], int l, int r, int x) {
    int i;
    for (i = l; i < r; i++)
        if (arr[i] == x)
            break;
    swap(&arr[i], &arr[r]);

    i = l;
    for (int j = l; j <= r - 1; j++) {
        if (arr[j] <= x) {
            swap(&arr[i], &arr[j]);
            i++;
        }
    }
    swap(&arr[i], &arr[r]);
    return i;
}

// Function to return median of an array using QuickSelect algorithm
int quickSelect(int arr[], int l, int r, int k) {
    if (k > 0 && k <= r - l + 1) {
        int n = r - l + 1;
        int i, median[(n + 4) / 5];
        for (i = 0; i < n / 5; i++)
            median[i] = arr[l + i * 5 + 2];
        if (i * 5 < n) {
            median[i] = arr[l + i * 5 + 2];
            i++;
        }
        int medOfMed = (i == 1) ? median[i - 1] : quickSelect(median, 0, i - 1, i / 2);
        int pos = partition(arr, l, r, medOfMed);
        if (pos - l == k - 1)
            return arr[pos];
        if (pos - l > k - 1)
            return quickSelect(arr, l, pos - 1, k);
        return quickSelect(arr, pos + 1, r, k - pos + l - 1);
    }
    return -1;
}

// Function to find the median of an array using Randomized QuickSelect algorithm
int randomizedMedian(int arr[], int n) {
    srand(time(NULL));
    int k = (n + 1) / 2;
    return quickSelect(arr, 0, n - 1, k);
}

// Driver code
int main() {
    int arr[] = {3, 7, 9, 1, 5, 8, 10, 2, 4, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    int median = randomizedMedian(arr, n);
    printf("Median is %d", median);
    return 0;
}
