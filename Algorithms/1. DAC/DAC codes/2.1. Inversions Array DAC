#include <stdio.h>
#include <stdlib.h>

long long merge(int arr[], int temp[], int left, int mid, int right) {
    int i, j, k;
    long long count = 0;

    i = left;
    j = mid;
    k = left;

    while (i <= mid - 1 && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            count += (mid - i);
        }
    }

    while (i <= mid - 1) {
        temp[k++] = arr[i++];
    }

    while (j <= right) {
        temp[k++] = arr[j++];
    }

    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }

    return count;
}

long long mergeSort(int arr[], int temp[], int left, int right) {
    int mid;
    long long count = 0;

    if (right > left) {
        mid = (left + right) / 2;

        count += mergeSort(arr, temp, left, mid);
        count += mergeSort(arr, temp, mid + 1, right);

        count += merge(arr, temp, left, mid + 1, right);
    }

    return count;
}

long long countInversions(int arr[], int n) {
    int *temp = (int *) malloc(n * sizeof(int));
    return mergeSort(arr, temp, 0, n - 1);
}

int main() {
    int arr[] = {1, 20, 6, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    long long count = countInversions(arr, n);
    printf("Number of inversions = %lld\n", count);
    return 0;
}
