#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Define the maximum number of items that can be considered
#define MAX_N 100

// Define the structure to represent an item
struct item {
    int weight;
    int value;
};

// Define the global variables for the problem
int max_weight;
int num_items;
struct item items[MAX_N];

// Define a structure to represent a node in the decision tree
struct node {
    int level;
    int weight;
    int value;
    float bound;
};

// Define a function to calculate the bound of a node
float calculate_bound(struct node n) {
    int i;
    int weight_left;
    float bound;
    
    if (n.weight >= max_weight) {
        return 0.0;
    }
    
    bound = n.value;
    weight_left = max_weight - n.weight;
    
    for (i = n.level + 1; i < num_items; i++) {
        if (items[i].weight <= weight_left) {
            bound += items[i].value;
            weight_left -= items[i].weight;
        } else {
            bound += items[i].value * ((float) weight_left / items[i].weight);
            break;
        }
    }
    
    return bound;
}

// Define a function to compare two nodes based on their bound
int compare_nodes(const void *a, const void *b) {
    float bound_a = ((struct node *) a)->bound;
    float bound_b = ((struct node *) b)->bound;
    
    if (bound_a > bound_b) {
        return -1;
    } else if (bound_a < bound_b) {
        return 1;
    } else {
        return 0;
    }
}

// Define the main function for the branch and bound algorithm
int knapsack() {
    int i, j;
    struct node root, curr, left, right;
    struct node queue[MAX_N * 2];
    int head, tail;
    int max_value = 0;
    
    // Initialize the root node
    root.level = -1;
    root.weight = 0;
    root.value = 0;
    root.bound = calculate_bound(root);
    
    // Initialize the queue with the root node
    queue[0] = root;
    head = 0;
    tail = 1;
    
    // Iterate through the queue
    while (head < tail) {
        // Get the next node from the queue
        curr = queue[head];
        head++;
        
        // Check if the node is promising
        if (curr.bound > max_value) {
            // Check if the node is a leaf node
            if (curr.level == num_items - 1) {
                max_value = curr.value;
            } else {
                // Create the left child node (take the next item)
                left.level = curr.level + 1;
                left.weight = curr.weight + items[left.level].weight;
                left.value =curr.value + items[left.level].value;
           left.bound = calculate_bound(left);
           
           
                       // Create the right child node (exclude the next item)
            right.level = curr.level + 1;
            right.weight = curr.weight;
            right.value = curr.value;
            right.bound = calculate_bound(right);
            
            // Add the child nodes to the queue
            if (left.bound > max_value) {
                queue[tail] = left;
                tail++;
            }
            
            if (right.bound > max_value) {
                queue[tail] = right;
                tail++;
            }
        }
    }
}

return max_value;


}

// Define the main function
int main() {
int i;
int value;
// Read in the problem data
printf("Enter the maximum weight: ");
scanf("%d", &max_weight);

printf("Enter the number of items: ");
scanf("%d", &num_items);

printf("Enter the weight and value of each item:\n");
for (i = 0; i < num_items; i++) {
    scanf("%d %d", &items[i].weight, &items[i].value);
}

// Sort the items in descending order of value per weight
qsort(items, num_items, sizeof(struct item), compare_nodes);

// Run the branch and bound algorithm
value = knapsack();

// Print the result
printf("The maximum value that can be put in a knapsack of capacity %d is %d.\n", max_weight, value);

return 0;

}
