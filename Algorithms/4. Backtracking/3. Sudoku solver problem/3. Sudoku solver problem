solve_sudoku(board):
    # Find the next empty cell
    row, col = find_empty_cell(board)

    # If all cells are filled, return true
    if row == -1 and col == -1:
        return true

    # Try filling each number from 1 to 9 in the cell
    for num = 1 to 9:
        # If the number is valid in the cell, place it and recurse
        if is_valid(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
                return true
            # If the recursion doesn't yield a solution, backtrack
            board[row][col] = 0

    # If no number can be placed, return false
    return false

find_empty_cell(board):
    # Iterate over the board and find the first empty cell
    for row = 0 to 8:
        for col = 0 to 8:
            if board[row][col] == 0:
                return (row, col)
    # If no empty cell is found, return (-1, -1)
    return (-1, -1)

is_valid(board, row, col, num):
    # Check if the number is already present in the same row
    for i = 0 to 8:
        if board[row][i] == num:
            return false

    # Check if the number is already present in the same column
    for j = 0 to 8:
        if board[j][col] == num:
            return false

    # Check if the number is already present in the same 3x3 box
    box_row = row - row % 3
    box_col = col - col % 3
    for i = 0 to 2:
        for j = 0 to 2:
            if board[box_row + i][box_col + j] == num:
                return false

    # If the number is not present in any of the above cases, it is valid
    return true
