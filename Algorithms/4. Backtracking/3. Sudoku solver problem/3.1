#include <stdio.h>
#include <stdbool.h>

bool is_valid(int board[9][9], int row, int col, int num);
bool find_empty_cell(int board[9][9], int *row, int *col);
bool solve_sudoku(int board[9][9]);

int main() {
    int board[9][9] = {
        {3, 0, 6, 5, 0, 8, 4, 0, 0},
        {5, 2, 0, 0, 0, 0, 0, 0, 0},
        {0, 8, 7, 0, 0, 0, 0, 3, 1},
        {0, 0, 3, 0, 0, 0, 0, 2, 0},
        {9, 0, 0, 8, 0, 0, 0, 0, 5},
        {0, 5, 0, 0, 0, 0, 6, 0, 0},
        {1, 3, 0, 0, 0, 0, 2, 5, 0},
        {0, 0, 0, 0, 0, 0, 0, 7, 4},
        {};
        

if (solve_sudoku(board)) {
    printf("Sudoku solution:\n");
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}
else {
    printf("No solution exists.\n");
}

return 0;
    }
    
    bool solve_sudoku(int board[9][9]) {
int row, col;
if (!find_empty_cell(board, &row, &col)) {
return true; // All cells are filled
}

for (int num = 1; num <= 9; num++) {
    if (is_valid(board, row, col, num)) {
        board[row][col] = num;
        if (solve_sudoku(board)) {
            return true;
        }
        board[row][col] = 0; // Backtrack
    }
}

return false; // No number can be placed

}

bool find_empty_cell(int board[9][9], int *row, int *col) {
for (*row = 0; *row < 9; (*row)++) {
for (*col = 0; *col < 9; (*col)++) {
if (board[*row][*col] == 0) {
return true; // Found an empty cell
}
}
}
return false; // All cells are filled
}


bool is_valid(int board[9][9], int row, int col, int num) {
// Check if the number is already present in the same row
for (int i = 0; i < 9; i++) {
if (board[row][i] == num) {
return false;
}
}

// Check if the number is already present in the same column
for (int j = 0; j < 9; j++) {
    if (board[j][col] == num) {
        return false;
    }
}

// Check if the number is already present in the same 3x3 box
int box_row = row - row % 3;
int box_col = col - col % 3;
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        if (board[box_row + i][box_col + j] == num) {
            return false;
        }
    }
}

// If the number is not present in any of the above cases, it is valid
return true;
}


//The above code uses recursion to solve the Sudoku puzzle by trying out each number from 1 to 9 in each empty cell, and backtracking if no number can be placed in the cell. The `is_valid` function checks if a given number is valid to be placed in a given cell, by checking if it is already present in the same row, column, or 3x3 box. The `find_empty_cell` function finds the first empty cell in the board, while `solve_sudoku` is the main function that uses the backtracking approach to solve the puzzle.


