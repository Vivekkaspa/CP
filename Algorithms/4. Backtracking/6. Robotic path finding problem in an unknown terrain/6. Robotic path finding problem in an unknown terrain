//Note: The code assumes that the terrain map is represented by a two-dimensional array

#include <stdio.h>
#include <stdlib.h>

#define MAX_ROWS 100
#define MAX_COLS 100

typedef struct {
  int x, y;
} Position;

typedef struct {
  int rows, cols;
  int map[MAX_ROWS][MAX_COLS];
} Terrain;

int isValidMove(Terrain *terrain, Position *pos) {
  if (pos->x < 0 || pos->x >= terrain->rows) {
    return 0;
  }
  if (pos->y < 0 || pos->y >= terrain->cols) {
    return 0;
  }
  if (terrain->map[pos->x][pos->y] == 1) {
    return 0;
  }
  return 1;
}

void findPath(Terrain *terrain, Position *start, Position *goal, Position *path, int k) {
  if (start->x == goal->x && start->y == goal->y) {
    printf("(");
    for (int i = 0; i < k; i++) {
      printf("(%d,%d)", path[i].x, path[i].y);
      if (i != k - 1) {
        printf("->");
      }
    }
    printf(")\n");
    return;
  }
  Position adjacent[4] = {{start->x - 1, start->y}, {start->x, start->y - 1}, {start->x + 1, start->y}, {start->x, start->y + 1}};
  for (int i = 0; i < 4; i++) {
    if (isValidMove(terrain, &adjacent[i])) {
      path[k] = adjacent[i];
      terrain->map[adjacent[i].x][adjacent[i].y] = 1;
      findPath(terrain, &adjacent[i], goal, path, k + 1);
      terrain->map[adjacent[i].x][adjacent[i].y] = 0;
    }
  }
}

int main() {
  Terrain terrain = {
    5, 5,
    {
      {0, 0, 1, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 0, 1},
      {1, 1, 0, 0, 1},
      {1, 1, 0, 0, 0},
    }
  };
  Position start = {0, 0}, goal = {4, 4};
  Position path[MAX_ROWS * MAX_COLS] = {{0, 0}};
  terrain.map[start.x][start.y] = 1;
  findPath(&terrain, &start, &goal, path, 1);
  return 0;
}
