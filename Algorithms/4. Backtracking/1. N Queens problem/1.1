#include <stdio.h>
#include <stdlib.h>

#define N 8  // change this value to change the size of the board

int board[N][N];  // the chess board

// function prototypes
void print_board();
int is_safe(int row, int col);
void place_queen(int row);
void remove_queen(int row);

int main() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            board[i][j] = 0;  // initialize the board to all zeros
        }
    }
    place_queen(0);  // start placing queens at the top row
    return 0;
}

// prints the current state of the board
void print_board() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// checks if it's safe to place a queen in the given row and column
int is_safe(int row, int col) {
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 1) {  // there is already a queen in the same column
            return 0;
        }
        if (col-i >= 0 && board[row-i-1][col-i] == 1) {  // there is already a queen in the diagonal
            return 0;
        }
        if (col+i < N && board[row-i-1][col+i] == 1) {  // there is already a queen in the diagonal
            return 0;
        }
    }
    return 1;  // it's safe to place a queen in this position
}

// places a queen in the given row
void place_queen(int row) {
    for (int i = 0; i < N; i++) {
        if (is_safe(row, i)) {
            board[row][i] = 1;  // place the queen in this position
            if (row == N-1) {  // all queens have been placed
                print_board();  // print the solution
            } else {
                place_queen(row+1);  // move on to the next row
            }
            remove_queen(row);  // backtrack
        }
    }
}

// removes the queen from the given row
void remove_queen(int row) {
    for (int i = 0; i < N; i++) {
        if (board[row][i] == 1) {
            board[row][i] = 0;  // remove the queen from this position
            return;
        }
    }
}
