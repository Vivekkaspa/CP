#include<stdio.h>
#include<string.h>
#include<math.h>

#define d 256 //size of the character set

void RabinKarp_Search(char *text, char *pattern, int q){
    int n = strlen(text);
    int m = strlen(pattern);
    int h = 1;
    int i, j;
    int p = 0; //hash value for pattern
    int t = 0; //hash value for text

    for(i=0; i<m-1; i++){
        h = (h*d)%q;
    }

    for(i=0; i<m; i++){
        p = (d*p + pattern[i])%q;
        t = (d*t + text[i])%q;
    }

    for(i=0; i<=n-m; i++){
        if(p == t){
            for(j=0; j<m; j++){
                if(text[i+j] != pattern[j]){
                    break;
                }
            }
            if(j == m){
                printf("Pattern found at index %d\n", i);
            }
        }
        if(i < n-m){
            t = (d*(t - text[i]*h) + text[i+m])%q;
            if(t < 0){
                t = (t + q);
            }
        }
    }
}

int main(){
    char text[100], pattern[100];
    int q;

    printf("Enter the text: ");
    scanf("%s", text);

    printf("Enter the pattern: ");
    scanf("%s", pattern);

    printf("Enter a prime number to use as modulus: ");
    scanf("%d", &q);

    RabinKarp_Search(text, pattern, q);

    return 0;
}

//In this implementation, the RabinKarp_Search function takes the text string, the pattern string, and a prime number q to use as the modulus for the hash function. The function computes the hash value of the pattern and the first m characters of the text using a rolling hash. It then compares the hash values and if they match, it checks if the pattern and text substring match. If a match is found, it prints the starting index of the pattern in the text.