#include <stdio.h>
#include <limits.h>

#define N 7 // number of nodes
#define M 8 // number of edges

// graph representation
int graph[N][N] = {
    {0, 2, 1, 0, 0, 0, 0},
    {0, 0, 0, 3, 10, 0, 0},
    {0, 0, 0, 2, 0, 7, 0},
    {0, 0, 0, 0, 0, 2, 0},
    {0, 0, 0, 0, 0, 0, 5},
    {0, 0, 0, 0, 0, 0, 3},
    {0, 0, 0, 0, 0, 0, 0}
};

// edge representation
int edges[M][2] = {
    {0, 1},
    {0, 2},
    {1, 3},
    {1, 4},
    {2, 3},
    {2, 5},
    {3, 5},
    {4, 6}
};

// cost and path arrays
int cost[N] = {INT_MAX, INT_MAX, INT_MAX, INT_MAX, INT_MAX, INT_MAX, 0};
int path[N] = {-1, -1, -1, -1, -1, -1, -1};

// function to find optimal path
void findPath() {
    // backward pass
    for (int i = N-2; i >= 0; i--) {
        for (int j = 0; j < M; j++) {
            int u = edges[j][0], v = edges[j][1];
            if (u == i && cost[u] != INT_MAX) {
                int newCost = graph[u][v] + cost[v];
                if (newCost < cost[u]) {
                    cost[u] = newCost;
                    path[u] = v;
                }
            }
        }
    }
    // forward pass
    for (int i = 1; i < N; i++) {
        for (int j = 0; j < M; j++) {
            int u = edges[j][0], v = edges[j][1];
            if (v == i && cost[v] != INT_MAX) {
                int newCost = graph[u][v] + cost[u];
            if (newCost < cost[v]) {
                cost[v] = newCost;
                path[v] = u;
            }
        }
    }
}

}

// function to print the optimal path and its cost
void printPath() {
printf("Optimal path: ");
int node = 0;
printf("%d ", node);
while (path[node] != -1) {
printf("%d ", path[node]);
node = path[node];
}
printf("\nOptimal cost: %d\n", cost[0]);
}

// main function
int main() {
findPath();
printPath();
return 0;
}