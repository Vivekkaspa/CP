#include <stdio.h>
#include <stdlib.h>

// Structure to represent items in the knapsack
struct item {
    int weight; // Weight of the item
    int value; // Value of the item
};

// Comparator function to sort items based on value per unit weight
int cmp(const void *a, const void *b) {
    struct item *item1 = (struct item *)a;
    struct item *item2 = (struct item *)b;
    double ratio1 = (double)item1->value / item1->weight;
    double ratio2 = (double)item2->value / item2->weight;
    if (ratio1 > ratio2) {
        return -1;
    } else if (ratio1 < ratio2) {
        return 1;
    } else {
        return 0;
    }
}

int main() {
    int n; // Number of items
    int capacity; // Maximum weight capacity of the knapsack
    double max_value = 0; // Maximum value that can be obtained from the knapsack
    struct item items[100]; // Array to store the items
    
    printf("Enter the number of items: ");
    scanf("%d", &n);
    
    printf("Enter the maximum weight capacity of the knapsack: ");
    scanf("%d", &capacity);
    
    printf("Enter the weight and value of each item:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &items[i].weight, &items[i].value);
    }
    
    // Sort the items based on value per unit weight in non-increasing order
    qsort(items, n, sizeof(struct item), cmp);
    
    // Fill the knapsack with items until the maximum weight capacity is reached
    for (int i = 0; i < n; i++) {
        if (capacity == 0) {
            break;
        }
        if (items[i].weight <= capacity) {
            max_value += items[i].value;
            capacity -= items[i].weight;
        } else {
            max_value += ((double)capacity / items[i].weight) * items[i].value;
            capacity = 0;
        }
    }
    
    printf("Maximum value that can be obtained from the knapsack: %.2lf\n", max_value);
    
    return 0;
}
