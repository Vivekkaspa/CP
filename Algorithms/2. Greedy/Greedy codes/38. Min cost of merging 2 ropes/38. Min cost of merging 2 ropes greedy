#include <stdio.h>
#include <stdlib.h>

// Function to swap two integers
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform heapify operation in a min heap
void heapify(int arr[], int n, int i) {
    int smallest = i; // Initialize smallest as root
    int l = 2 * i + 1; // Left child
    int r = 2 * i + 2; // Right child

    // If left child is smaller than root
    if (l < n && arr[l] < arr[smallest])
        smallest = l;

    // If right child is smaller than smallest so far
    if (r < n && arr[r] < arr[smallest])
        smallest = r;

    // If smallest is not root
    if (smallest != i) {
        swap(&arr[i], &arr[smallest]);
        heapify(arr, n, smallest);
    }
}

// Function to build a min heap
void buildHeap(int arr[], int n) {
    // Index of last non-leaf node
    int i = (n / 2) - 1;

    // Perform reverse level order traversal and heapify each node
    for (; i >= 0; i--)
        heapify(arr, n, i);
}

// Function to find the minimum cost of merging the ropes
int minCost(int arr[], int n) {
    int total_cost = 0;

    // Build a min heap with the lengths of the ropes
    buildHeap(arr, n);

    // While the heap has more than one element
    while (n > 1) {
        // Remove the two shortest ropes from the heap
        int shortest1 = arr[0];
        swap(&arr[0], &arr[n-1]);
        n--;
        heapify(arr, n, 0);

        int shortest2 = arr[0];
        swap(&arr[0], &arr[n-1]);
        n--;
        heapify(arr, n, 0);

        // Add their lengths together
        int merged_rope = shortest1 + shortest2;

        // Add the cost of merging these two ropes to the total cost
        total_cost += merged_rope;

        // Add the merged rope back to the heap
        arr[n] = merged_rope;
        n++;
        heapify(arr, n, n-1);
    }

    return total_cost;
}

// Driver code
int main() {
    int n;
    printf("Enter the number of ropes: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter the lengths of the ropes: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    int cost = minCost(arr, n);
    printf("The minimum cost of merging the ropes is %d.\n", cost);

 return 0;
}