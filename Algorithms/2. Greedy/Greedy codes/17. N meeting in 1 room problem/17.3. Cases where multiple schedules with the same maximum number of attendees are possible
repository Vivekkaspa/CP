#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int start_time;
    int end_time;
} person;

// compare function for sorting people by end time in ascending order
int cmpfunc(const void *a, const void *b) {
    const person *p1 = (const person *)a;
    const person *p2 = (const person *)b;
    return p1->end_time - p2->end_time;
}

int main() {
    int n;
    printf("Enter the number of people: ");
    scanf("%d", &n);

    person *people = (person *)malloc(n * sizeof(person));
    printf("Enter the start and end times for each person:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &people[i].start_time, &people[i].end_time);
    }

    // sort people by end time in ascending order
    qsort(people, n, sizeof(person), cmpfunc);

    int current_end_time = 0;
    int max_attendees = 0;
    int *max_attendees_indexes = (int *)malloc(n * sizeof(int)); // array to store the indexes of people in the schedule with the maximum number of attendees
    int max_attendees_count = 0; // count of schedules with the maximum number of attendees

    // array to store the schedule for each person
    int *schedule = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        schedule[i] = -1; // initialize to -1 to indicate that the person has not been scheduled yet
    }

    // find all possible schedules with the maximum number of attendees
    for (int i = 0; i < n; i++) {
        int attendees = 0;
        current_end_time = people[i].start_time;
        for (int j = i; j < n; j++) {
            if (people[j].start_time >= current_end_time) {
                schedule[j] = attendees;
                attendees++;
                current_end_time = people[j].end_time;
            }
        }
        if (attendees > max_attendees) {
            max_attendees = attendees;
            max_attendees_indexes[0] = i;
            max_attendees_count = 1;
        } else if (attendees == max_attendees) {
            max_attendees_indexes[max_attendees_count] = i;
            max_attendees_count++;
        }
        // reset the schedule for the next iteration
        for (int j = i; j < n; j++) {
            schedule[j] = -1;
        }
    }

    // output all schedules with the maximum number of attendees
    printf("Scheduled meetings with maximum number of attendees (%d):\n", max_attendees);
    for (int i = 0; i < max_attendees_count; i++) {
        int index = max_attendees_indexes[i];
        current_end_time = people[index].start_time;
        printf("Schedule %d:\n", i+1);
        for (int j = index; j < n; j++) {
            if (schedule[j] != -1) {
                if (schedule[j] == i) {
                    printf("Person %d: %d-%d\n", j+1, people[j].start_time, people[j
