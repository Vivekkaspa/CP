function sjf(arrival_time[], burst_time[], n) {
    // Initialize the waiting time, turnaround time, and completion time
    let waiting_time[n], turnaround_time[n], completion_time[n]
    
    // Initialize the remaining burst time and the process completed flag
    let remaining_burst_time[n], completed[n] = 0
    for (let i = 0; i < n; i++) {
        remaining_burst_time[i] = burst_time[i]
    }
    
    // Initialize the current time, the process with minimum burst time, and the process completed count
    let current_time = 0, min_burst_time, min_burst_time_process, process_completed_count = 0
    
    // Loop until all processes are completed
    while (process_completed_count < n) {
        // Find the process with the minimum burst time
        min_burst_time = INT_MAX
        for (let i = 0; i < n; i++) {
            if (arrival_time[i] <= current_time && completed[i] == 0 && remaining_burst_time[i] < min_burst_time) {
                min_burst_time = remaining_burst_time[i]
                min_burst_time_process = i
            }
        }
        
        // Update the remaining burst time and current time for the selected process
        remaining_burst_time[min_burst_time_process]--
        current_time++
        
        // If the process is completed, update the completion time, turnaround time, and waiting time
        if (remaining_burst_time[min_burst_time_process] == 0) {
            completion_time[min_burst_time_process] = current_time
            turnaround_time[min_burst_time_process] = completion_time[min_burst_time_process] - arrival_time[min_burst_time_process]
            waiting_time[min_burst_time_process] = turnaround_time[min_burst_time_process] - burst_time[min_burst_time_process]
            completed[min_burst_time_process] = 1
            process_completed_count++
        }
    }
    
    // Print the waiting time, turnaround time, and completion time for all processes
    printf("Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n")
    for (let i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, arrival_time[i], burst_time[i], completion_time[i], turnaround_time[i], waiting_time[i])
    }
}
