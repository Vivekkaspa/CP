#include<stdio.h>
#include<stdlib.h>
#include<limits.h>




int cmpfunc(const void *a, const void *b) {
   return *(int *)a - *(int *)b;
}

// Define the main function
int main() {
    // Read in the number of elements in the array and the number of negations
    int n, k;
    scanf("%d %d", &n, &k);

    // Read in the elements of the array
    int arr[n];
    for(int i=0; i<n; i++) {
        scanf("%d", &arr[i]);
    }

// Define the comparison function for qsort


    // Sort the array in non-decreasing order
    qsort(arr, n, sizeof(int), cmpfunc);

    // Iterate through the array
    int i = 0;
    while(k > 0 && i < n) {
        // If k is greater than 0 and the current element is negative, negate it and decrement k
        if(arr[i] < 0) {
            arr[i] = -arr[i];
            k--;
        }
        // If k is 0 or the current element is positive, break out of the loop
        else {
            break;
        }
        i++;
    }

    // If k is still greater than 0 and it is odd, negate the smallest element in the array
    if(k % 2 == 1) {
        int smallest = INT_MAX;
        int index = -1;
        for(int j=0; j<n; j++) {
            if(arr[j] < smallest) {
                smallest = arr[j];
                index = j;
            }
        }
        arr[index] = -arr[index];
    }

    // Compute the sum of the array
    int sum = 0;
    for(int i=0; i<n; i++) {
        sum += arr[i];
    }

    // Print the maximum array sum after k negations
    printf("Maximum array sum after %d negations: %d\n", k, sum);

    return 0;
}

