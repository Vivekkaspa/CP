//implementation of the Chu-Liu/Edmonds algorithm to find a minimum cost arborescence using a multi-phase greedy algorithm 

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 100
#define MAX_EDGES 1000

typedef struct {
    int from;
    int to;
    int weight;
} edge;

// Find the root of the tree containing node i in the given forest
int find(int i, int* forest) {
    while (i != forest[i]) {
        forest[i] = forest[forest[i]]; // path compression
        i = forest[i];
    }
    return i;
}

// Merge the tree containing node i with the tree containing node j in the given forest
void merge(int i, int j, int* forest) {
    int root_i = find(i, forest);
    int root_j = find(j, forest);
    if (root_i != root_j) {
        forest[root_i] = root_j;
    }
}

// Find the minimum cost arborescence rooted at node r in the graph with n nodes and m edges
int min_cost_arborescence(int n, int m, edge* edges, int r) {
    int i, j, k;
    int* forest = (int*) malloc(n * sizeof(int));
    int* in_arborescence = (int*) calloc(n, sizeof(int));
    int* min_edge = (int*) malloc(n * sizeof(int));
    int* parent = (int*) malloc(n * sizeof(int));
    int* labels = (int*) malloc(n * sizeof(int));
    edge* in_edges = (edge*) malloc(m * sizeof(edge));
    int num_in_edges = 0;
    int cost = 0;

    // Initialize the forest
    for (i = 0; i < n; i++) {
        forest[i] = i;
    }

    // Phase 1: Remove all incoming edges to the root node r
    for (i = 0; i < m; i++) {
        if (edges[i].to == r) {
            continue;
        }
        int root_to = find(edges[i].to, forest);
        if (root_to == r) {
            in_arborescence[edges[i].to] = 1;
            parent[edges[i].to] = r;
            cost += edges[i].weight;
            continue;
        }
        if (!min_edge[root_to] || edges[i].weight < edges[min_edge[root_to]].weight) {
            min_edge[root_to] = i;
        }
    }
    for (i = 0; i < n; i++) {
        if (i == r || in_arborescence[i]) {
            continue;
        }
        if (!min_edge[i]) {
            free(forest);
            free(in_arborescence);
            free(min_edge);
            free(parent);
            free(labels);
            free(in_edges);
            return -1; // no arborescence exists
        }
        in_arborescence[i] = 1;
        parent[i] = edges[min_edge[i]].from;
        cost += edges[min_edge[i]].weight;
    }

    // Phase 2: Contract strongly connected components that do not contain the root node r
    int* contract = (int*) calloc(n, sizeof(int));
    int* roots = (int*) malloc(n * sizeof(int));
    int* labels_inv = (int*) malloc(n * sizeof(int));
    int* new_indices = (int*) malloc(n * sizeof(int));
    int num_components = 0;
    for (i = 0; i < n; i++) {
if (i == r || in_arborescence[i] || contract[find(i, forest)]) {
continue;
}
num_components++;
int root = find(i, forest);
int count = 0;
for (j = 0; j < n; j++) {
if (find(j, forest) == root) {
contract[j] = num_components;
count++;
}
}

for (j = 0; j < m; j++) {
if (contract[find(edges[j].from, forest)] == num_components && contract[find(edges[j].to, forest)] == num_components) {
in_edges[num_in_edges++] = edges[j];
}
}

int new_root = num_components + n - 1;
roots[num_components] = root;
for (j = 0; j < n; j++) {
if (contract[j] == num_components) {
forest[j] = new_root;
labels[j] = edges[min_edge[j]].weight - edges[min_edge[find(j, forest)]].weight;
labels_inv[j] = j;
new_indices[j] = count + labels_inv[j];
} else {
labels[j] = INT_MAX;
}
}

for (j = 0; j < num_in_edges; j++) {
in_edges[j].from = new_indices[in_edges[j].from];
in_edges[j].to = new_indices[in_edges[j].to];
}
in_arborescence[new_root] = 1;
parent[new_root] = roots[num_components];
cost += min_cost_arborescence(count + 1, num_in_edges, in_edges, new_root);
num_in_edges = 0;
}

// Phase 3: Fix the labels and find the minimum cost arborescence
for (i = 0; i < n; i++) {
    if (i == r || in_arborescence[i]) {
        continue;
    }
    labels[i] -= edges[min_edge[i]].weight;
    int root = find(i, forest);
    if (labels[root] == INT_MAX) {
        in_arborescence[root] = 1;
        parent[root] = edges[min_edge[root]].from;
        cost += edges[min_edge[root]].weight;
    }
}
for (i = 0; i < n; i++) {
    if (i == r || in_arborescence[i]) {
        continue;
    }
    int cur = i;
    while (!in_arborescence[cur]) {
        in_arborescence[cur] = 1;
        parent[cur] = labels_inv[cur];
        cur = find(labels_inv[cur], forest);
    }
    cost += labels[i];
}

free(forest);
free(in_arborescence);
free(min_edge);
free(parent);
free(labels);
free(in_edges);
free(contract);
free(roots);
free(labels_inv);
free(new_indices);

return cost;


