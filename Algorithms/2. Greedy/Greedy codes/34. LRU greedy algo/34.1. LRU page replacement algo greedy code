#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

void lru_page_replacement(int pages[], int num_pages, int num_frames) {
    int i, j, k;
    int page_fault_count = 0;
    int lru_page_index;
    int frame[MAX_SIZE] = {-1}; // Initialize all frames to -1
    int counter[MAX_SIZE] = {0}; // Initialize all counters to 0

    for(i = 0; i < num_pages; i++) {
        // Check if page is already in memory
        int page_found = 0;
        for(j = 0; j < num_frames; j++) {
            if(frame[j] == pages[i]) {
                page_found = 1;
                counter[j] = i; // Update counter to current time
                break;
            }
        }

        // If page is not found, find the least recently used page
        if(!page_found) {
            page_fault_count++;

            // If all frames are full, find the LRU page
            if(i >= num_frames) {
                lru_page_index = 0;
                for(j = 1; j < num_frames; j++) {
                    if(counter[j] < counter[lru_page_index]) {
                        lru_page_index = j;
                    }
                }
            }
            // If there are still empty frames, find an empty frame
            else {
                lru_page_index = i;
            }

            // Add new page to LRU frame
            frame[lru_page_index] = pages[i];
            counter[lru_page_index] = i; // Update counter to current time
        }
    }

    printf("Number of page faults: %d\n", page_fault_count);
}

int main() {
    int pages[MAX_SIZE];
    int num_pages, num_frames;

    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    printf("Enter the page reference string: ");
    for(int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);

    lru_page_replacement(pages, num_pages, num_frames);

    return 0;
}
